// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<View
  style={
    Object {
      "flex": 1,
      "overflow": "hidden",
    }
  }
>
  <RNCWebView
    allowFileAccess={false}
    allowsFullscreenVideo={false}
    androidHardwareAccelerationDisabled={false}
    androidLayerType="none"
    automaticallyAdjustContentInsets={false}
    cacheEnabled={true}
    injectedJavaScript="
    var styleElement = document.createElement('style');
    styleElement.innerHTML = '\\\\n  body {\\\\n    margin: 0;\\\\n    padding: 0;\\\\n  }\\\\n';
    document.head.appendChild(styleElement);
    
  ;
  if (!document.getElementById(\\"rnahw-wrapper\\")) {
    var wrapper = document.createElement('div');
    wrapper.id = 'rnahw-wrapper';
    while (document.body.firstChild instanceof Node) {
      wrapper.appendChild(document.body.firstChild);
    }
    document.body.appendChild(wrapper);
  }
  
  var usingScale = false ? screen.width / window.innerWidth : 1;
  var scaling = false;
  var zoomedin = false;
  var lastHeight = 0;
  var heightTheSameTimes = 0;
  var maxHeightTheSameTimes = 5;
  var forceRefreshDelay = 1000;
  var forceRefreshTimeout;
  var checkPostMessageTimeout;

  function updateSize() {
    if (zoomedin || scaling || document.fullscreenElement) {
      return;
    }
    if (
      !window.hasOwnProperty('ReactNativeWebView') || 
      !window.ReactNativeWebView.hasOwnProperty('postMessage')
    ) {
      checkPostMessageTimeout = setTimeout(updateSize, 200);
      return;
    }

    clearTimeout(checkPostMessageTimeout);
    var result = wrapper.getBoundingClientRect()
    height = result.height + result.top;
    if(!height) {
      height = wrapper.offsetHeight || document.documentElement.offsetHeight
    }
    width = result.width;
    if(!width) {
      width = wrapper.offsetWidth || document.documentElement.offsetWidth
    }


    window.ReactNativeWebView.postMessage(JSON.stringify({ width: Math.min(width, screen.width), height: height * usingScale }));

    // Make additional height checks (required to fix issues wit twitter embeds)
    clearTimeout(forceRefreshTimeout);

    if (lastHeight !== height) {
      heightTheSameTimes = 1;
    } else {
      heightTheSameTimes++;
    }

    lastHeight = height;

    if (heightTheSameTimes <= maxHeightTheSameTimes) {
      forceRefreshTimeout = setTimeout(
        updateSize,
        heightTheSameTimes * forceRefreshDelay
      );
    }
  }
  
  window.addEventListener('load', updateSize);
  window.addEventListener('resize', updateSize);
  
  var MutationObserver =
    window.MutationObserver || window.WebKitMutationObserver;
  var observer = new MutationObserver(updateSize);
  observer.observe(document, {
    subtree: true,
    attributes: true
  });

  
  
  updateSize();
  
  "
    messagingModuleName="WebViewMessageHandler1"
    overScrollMode="always"
    scrollEnabled={false}
    setSupportMultipleWindows={true}
    showsHorizontalScrollIndicator={false}
    showsVerticalScrollIndicator={false}
    source={
      Object {
        "uri": "https://jotn9sgpg6.execute-api.eu-west-1.amazonaws.com/prod/component/a0534eee-682e-4955-8e1e-84b428ef1e79?dev=false&env=jest&platform=android&version=0.0.0",
      }
    }
    startInLoadingState={true}
    style={
      Object {
        "backgroundColor": "transparent",
        "flex": 1,
        "height": 1,
        "overflow": "hidden",
        "width": "100%",
      }
    }
  />
  <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "white",
        "flex": 1,
        "height": "100%",
        "justifyContent": "center",
        "position": "absolute",
        "width": "100%",
      }
    }
  >
    <ActivityIndicator
      animating={true}
      color={null}
      hidesWhenStopped={true}
      size="small"
    />
  </View>
</View>
`;

exports[`should not render if error 1`] = `null`;
