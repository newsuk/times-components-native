// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`InlineContent ad generates content measurements for inline ad 1`] = `
<MeasureInlineContent
  content={
    Array [
      Object {
        "children": Array [
          Object {
            "attributes": Object {
              "value": "article content",
            },
            "children": Array [],
            "name": "text",
          },
        ],
        "id": "0-1000",
        "name": "paragraph",
      },
    ]
  }
  contentParameters={
    Object {
      "contentHeight": 630,
      "contentLineHeight": 26,
      "contentWidth": 329,
      "itemWidth": 321,
    }
  }
  renderMeasuredContents={[Function]}
  skeletonProps={
    Object {
      "data": Array [],
      "isArticleTablet": true,
      "isTablet": true,
      "narrowContent": false,
      "scale": 1,
      "windowWidth": 1000,
    }
  }
/>
`;

exports[`InlineContent ad renders content and inline ad via a render-prop 1`] = `
<React.Fragment>
  <View
    style={
      Array [
        Object {
          "flex": 1,
          "flexDirection": "row",
          "width": 660,
        },
        Object {
          "alignSelf": "center",
          "height": 630,
        },
        false,
      ]
    }
  >
    <View
      style={
        Object {
          "height": 630,
          "width": 329,
        }
      }
    >
      <Gutter
        style={
          Object {
            "overflow": "hidden",
          }
        }
      >
        <ErrorBoundary>
          <ArticleParagraphWrapper
            ast={
              Array [
                <Text>
                  article content
                </Text>,
              ]
            }
            attributes={
              Object {
                "inline": true,
              }
            }
            narrowContent={false}
            style={Object {}}
          >
            <Text
              allowFontScaling={false}
              selectable={true}
              style={
                Object {
                  "color": "#000000",
                  "fontFamily": "TimesDigitalW04",
                  "fontSize": 36,
                  "lineHeight": 52,
                }
              }
              testID="paragraph"
            >
              <Text>
                article content
              </Text>
            </Text>
          </ArticleParagraphWrapper>
        </ErrorBoundary>
      </Gutter>
    </View>
    <View
      style={
        Array [
          Object {
            "marginBottom": 10,
            "marginLeft": 10,
          },
          Object {
            "height": 620,
            "width": 321,
          },
        ]
      }
    >
      <Ad
        adConfig={Object {}}
        baseUrl="some-base-url"
        contextUrl="some-context-url"
        defaultFont={
          Object {
            "lineHeight": 26,
          }
        }
        display="inline"
        height={600}
        inlineContent={
          Array [
            Object {
              "children": Array [
                Object {
                  "attributes": Object {
                    "value": "article content",
                  },
                  "children": Array [],
                  "name": "text",
                },
              ],
              "name": "paragraph",
            },
          ]
        }
        isLoading={false}
        narrowContent={false}
        originalName="ad"
        skeletonProps={
          Object {
            "data": Array [],
            "isArticleTablet": true,
            "isTablet": true,
            "narrowContent": false,
            "scale": 1,
            "windowWidth": 1000,
          }
        }
        slotName="native-inline-ad-c"
        style={Object {}}
        width={300}
      />
    </View>
  </View>
</React.Fragment>
`;

exports[`InlineContent dropcap generates content measurements for dropcap 1`] = `
<MeasureInlineContent
  content={
    Array [
      Object {
        "children": Array [
          Object {
            "attributes": Object {
              "value": "article content",
            },
            "children": Array [],
            "name": "text",
          },
        ],
        "id": "0-1000",
        "name": "paragraph",
      },
    ]
  }
  contentParameters={
    Object {
      "contentHeight": 153.5625,
      "contentLineHeight": 26,
      "contentWidth": 521.1171875,
      "itemWidth": 128.8828125,
    }
  }
  itemProps={
    Object {
      "dropCapColor": "#13354E",
      "dropCapFont": "dropCap",
      "dropCapFontSize": 216,
      "dropCapText": "T",
      "height": 153.5625,
      "narrowContent": false,
      "originalName": "dropcap",
      "scale": 1,
      "width": 128.8828125,
    }
  }
  renderMeasuredContents={[Function]}
  skeletonProps={
    Object {
      "data": Array [],
      "isArticleTablet": true,
      "isTablet": true,
      "narrowContent": false,
      "scale": 1,
      "windowWidth": 1000,
    }
  }
/>
`;

exports[`InlineContent dropcap renders content and dropcap via a render-prop 1`] = `
<React.Fragment>
  <View
    style={
      Array [
        Object {
          "flex": 1,
          "flexDirection": "row",
          "width": 660,
        },
        Object {
          "alignSelf": "center",
          "height": 153.5625,
        },
        false,
      ]
    }
  >
    <View
      style={
        Array [
          Object {
            "marginBottom": 10,
            "marginLeft": 10,
          },
          Object {
            "height": 153.5625,
            "width": 128.8828125,
          },
        ]
      }
    >
      <DropCap
        dropCapColor="#13354E"
        dropCapFont="dropCap"
        dropCapFontSize={216}
        dropCapText="T"
        height={153.5625}
        narrowContent={false}
        originalName="dropcap"
        scale={1}
        width={128.8828125}
      />
    </View>
    <View
      style={
        Object {
          "height": 153.5625,
          "width": 521.1171875,
        }
      }
    >
      <Gutter
        style={
          Object {
            "overflow": "hidden",
          }
        }
      >
        <ErrorBoundary>
          <ArticleParagraphWrapper
            ast={
              Array [
                <Text>
                  article content
                </Text>,
              ]
            }
            attributes={
              Object {
                "inline": true,
              }
            }
            narrowContent={false}
            style={Object {}}
          >
            <Text
              allowFontScaling={false}
              selectable={true}
              style={
                Object {
                  "color": "#000000",
                  "fontFamily": "TimesDigitalW04",
                  "fontSize": 36,
                  "lineHeight": 52,
                }
              }
              testID="paragraph"
            >
              <Text>
                article content
              </Text>
            </Text>
          </ArticleParagraphWrapper>
        </ErrorBoundary>
      </Gutter>
    </View>
  </View>
</React.Fragment>
`;

exports[`InlineContent image generates content measurements for inline image 1`] = `
<MeasureInlineContent
  content={
    Array [
      Object {
        "children": Array [
          Object {
            "attributes": Object {
              "value": "article content",
            },
            "children": Array [],
            "name": "text",
          },
        ],
        "id": "0-1000",
        "name": "paragraph",
      },
    ]
  }
  contentParameters={
    Object {
      "contentHeight": 0,
      "contentLineHeight": 26,
      "contentWidth": 419,
      "itemWidth": 230.99999999999997,
    }
  }
  itemProps={
    Object {
      "captionOptions": Object {
        "caption": "some caption",
        "credits": "some credits",
      },
      "imageOptions": Object {
        "display": "inline",
        "index": 0,
        "narrowContent": false,
        "ratio": "16:9",
        "relativeHeight": 900,
        "relativeHorizontalOffset": 0,
        "relativeVerticalOffset": 0,
        "relativeWidth": 1600,
        "uri": "some image url",
      },
      "images": Array [],
      "onImagePress": [Function],
      "originalName": "image",
    }
  }
  renderMeasuredContents={[Function]}
  skeletonProps={
    Object {
      "isArticleTablet": true,
      "isTablet": true,
      "narrowContent": false,
    }
  }
/>
`;

exports[`InlineContent image renders content and inline image via a render-prop 1`] = `
<React.Fragment>
  <View
    style={
      Array [
        Object {
          "flex": 1,
          "flexDirection": "row",
          "width": 660,
        },
        Object {
          "alignSelf": "center",
          "height": 0,
        },
        false,
      ]
    }
  >
    <View
      style={
        Array [
          Object {
            "marginBottom": 10,
            "marginLeft": 10,
          },
          Object {
            "height": 0,
            "width": 230.99999999999997,
          },
        ]
      }
    >
      <ArticleImage
        captionOptions={
          Object {
            "caption": "some caption",
            "credits": "some credits",
          }
        }
        imageOptions={
          Object {
            "display": "inline",
            "index": 0,
            "narrowContent": false,
            "ratio": "16:9",
            "relativeHeight": 900,
            "relativeHorizontalOffset": 0,
            "relativeVerticalOffset": 0,
            "relativeWidth": 1600,
            "uri": "some image url",
          }
        }
        images={Array []}
        onImagePress={[Function]}
        originalName="image"
      />
    </View>
    <View
      style={
        Object {
          "height": 0,
          "width": 419,
        }
      }
    />
  </View>
  <Gutter
    style={
      Object {
        "overflow": "hidden",
      }
    }
  >
    <ErrorBoundary>
      <ArticleParagraphWrapper
        ast={
          Array [
            <Text>
              article content
            </Text>,
          ]
        }
        attributes={
          Object {
            "inline": false,
          }
        }
        narrowContent={false}
        style={Object {}}
      >
        <Text
          allowFontScaling={false}
          selectable={true}
          style={
            Object {
              "color": "#000000",
              "fontFamily": "TimesDigitalW04",
              "fontSize": 36,
              "lineHeight": 52,
            }
          }
          testID="paragraph"
        >
          <Text>
            article content
          </Text>
        </Text>
      </ArticleParagraphWrapper>
    </ErrorBoundary>
  </Gutter>
</React.Fragment>
`;

exports[`InlineContent pullQuote generates content measurements for pullQuote 1`] = `
<MeasureInlineContent
  content={
    Array [
      Object {
        "children": Array [
          Object {
            "attributes": Object {
              "value": "article content",
            },
            "children": Array [],
            "name": "text",
          },
        ],
        "id": "0-1000",
        "name": "paragraph",
      },
    ]
  }
  contentParameters={
    Object {
      "contentHeight": 0,
      "contentLineHeight": 26,
      "contentWidth": 419,
      "itemWidth": 230.99999999999997,
    }
  }
  itemProps={
    Object {
      "caption": "some caption",
      "children": Array [
        Object {
          "string": "some pull quote text",
        },
      ],
      "onTwitterLinkPress": [Function],
      "originalName": "pullQuote",
      "text": "some text",
      "twitter": "some twitter text",
      "width": 230.99999999999997,
    }
  }
  renderMeasuredContents={[Function]}
  skeletonProps={
    Object {
      "isArticleTablet": true,
      "isTablet": true,
      "narrowContent": false,
    }
  }
/>
`;

exports[`InlineContent pullQuote renders content and pullQuote ad via a render-prop 1`] = `
<React.Fragment>
  <View
    style={
      Array [
        Object {
          "flex": 1,
          "flexDirection": "row",
          "width": 660,
        },
        Object {
          "alignSelf": "center",
          "height": 0,
        },
        false,
      ]
    }
  >
    <View
      style={
        Array [
          Object {
            "marginBottom": 10,
            "marginLeft": 10,
          },
          Object {
            "height": 0,
            "width": 230.99999999999997,
          },
        ]
      }
    >
      <PullQuote
        caption="some caption"
        onTwitterLinkPress={[Function]}
        originalName="pullQuote"
        text="some text"
        twitter="some twitter text"
        width={230.99999999999997}
      >
        some pull quote text
      </PullQuote>
    </View>
    <View
      style={
        Object {
          "height": 0,
          "width": 419,
        }
      }
    />
  </View>
  <Gutter
    style={
      Object {
        "overflow": "hidden",
      }
    }
  >
    <ErrorBoundary>
      <ArticleParagraphWrapper
        ast={
          Array [
            <Text>
              article content
            </Text>,
          ]
        }
        attributes={
          Object {
            "inline": false,
          }
        }
        narrowContent={false}
        style={Object {}}
      >
        <Text
          allowFontScaling={false}
          selectable={true}
          style={
            Object {
              "color": "#000000",
              "fontFamily": "TimesDigitalW04",
              "fontSize": 36,
              "lineHeight": 52,
            }
          }
          testID="paragraph"
        >
          <Text>
            article content
          </Text>
        </Text>
      </ArticleParagraphWrapper>
    </ErrorBoundary>
  </Gutter>
</React.Fragment>
`;
